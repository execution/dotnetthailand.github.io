{"componentChunkName":"component---src-templates-docs-js","path":"/databases/migration-tools/flyway","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"2ac4f8b0-29ee-58ea-a95c-706d3ad2eb2f","title":"Flyway","slug":"/databases/migration-tools/flyway"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Flyway\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"How to setup and use Flyway Gradle\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Java\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Gradle\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create build.gradle with the following content (For an existing database)\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-groovy\"\n  }, \"buildscript{\\n  repositories{\\n    jcenter()\\n  }\\n\\n  dependencies{\\n    classpath 'mysql:mysql-connector-java:5.1.37'\\n  }\\n}\\n\\nplugins {\\n  id 'org.flywaydb.flyway' version '7.7.3'\\n}\\n\\nflyway {\\n  url = \\\"jdbc:mysql://${System.env.MYSQL_HOSTNAME}/${System.env.MYSQL_DATABASE}\\\"\\n  user = System.env.MYSQL_USERNAME\\n  password = System.env.MYSQL_PASSWORD\\n  locations = ['filesystem:migration']\\n  baselineVersion = \\\"2021.04.09\\\" // For using Flyway with an existing database\\n}\\n\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We configure Flyway to connect to a database on MySQL server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We read connection string from environment variables, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"System.env.MYSQL_HOSTNAME\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set locations to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"migration\"), \" folder which we will store schema version files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"migration\"), \" folder as the same level as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"build.gradle\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create some schema version files inside \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"migration\"), \" folder, e.g.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"V2021.04.09__baseline.sql\\nV2021.04.09.1__create-table.sql\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"File name must follow the convention \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"V1__Add_new_table\"), \" as in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://flywaydb.org/documentation/concepts/migrations#naming\"\n  }, \"https://flywaydb.org/documentation/concepts/migrations#naming\"), \" unless Flyway won't pick your schema version and apply it to a database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For an existing database start by running\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"gradle flywayBaseline --info\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note, you may need to setup some required environment variables in your script before running gradle command\\n-Next, apply a migration with the following command\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"gradle flywayBaseline --info\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check your database and you will find:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"flyway_schema_history\"), \" get created to track your schema history\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"V2021.04.09__baseline.sql\"), \" does not applied because it's used as a baseline.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"V2021.04.09.1__create-table.sql\"), \" has been applied to your database.\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"How to compress/squash way Flyway migration?\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/a/33510851/1872200\"\n  }, \"https://stackoverflow.com/a/33510851/1872200\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-setup-and-use-flyway-gradle","title":"How to setup and use Flyway Gradle"},{"url":"#how-to-compresssquash-way-flyway-migration","title":"How to compress/squash way Flyway migration?"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"databases/migration-tools/flyway.md","fields":{"gitLogLatestAuthorName":"aaronamm","gitLogLatestAuthorEmail":"theeranitp@gmail.com","gitLogLatestDate":"3 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"ddcec7338ad5fe298cf9012e16122c32e3393d60","date":"2021-04-10 06:40"}},"pageContext":{"id":"2ac4f8b0-29ee-58ea-a95c-706d3ad2eb2f"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}